"use strict";

import PushNotification from "react-native-push-notification";

export default class NotificationService {
  static configureNotificationService(handleNotification) {
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: null,

      // (required) Called when a remote or local notification is opened or received
      onNotification: notification => handleNotification(notification),

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
      senderID: "",

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       */
      requestPermissions: true
    });
  }
  static addScheduledNotificationFromReminder(reminder) {
    const dueDate = new Date(reminder.dueDate);
    // Only add a scheduled notification if it's not set with a past date
    if (dueDate >= new Date()) {
      this.addScheduledNotification(reminder.id, reminder.title, dueDate);
    }
  }
  static showNotificationFromReminder(reminder) {
    this.showNotification(reminder.id, reminder.title);
  }
  static showNotification(id, message) {
    this.addNotification(id, message, null);
  }
  static addScheduledNotification(id, message, date) {
    this.addNotification(id, message, date);
  }
  static addNotification(id, message, date) {
    const notification = {
      date: date, //new Date(Date.now() + (30 * 1000)), // in 30 secs

      /* Android Only Properties */
      id: "" + id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: "view", // (optional) default: view
      category: "", // (optional) default: null
      userInfo: { id: id }, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      //   title: title, // (optional)
      message: message, // (required)
      playSound: true, // (optional) default: true
      soundName: "default" // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    };
    if (date) {
      PushNotification.localNotificationSchedule(notification);
    } else {
      PushNotification.localNotification(notification);
    }
  }
  static checkNotificationServicePermission() {
    return PushNotification.checkPermissions(this.handlePerm);
  }

  static deleteNotification(id) {
    PushNotification.cancelLocalNotifications({ id: id });
  }

  static handlePerm(perms) {
    console.log("Permissions:+" + JSON.stringify(perms));
  }

  static initNotificationsFromReminders(reminders) {
    PushNotification.cancelAllLocalNotifications();
    const remindersToDo = reminders.filter(
      reminder =>
        reminder.dueDate &&
        reminder.done === false &&
        new Date(reminder.dueDate) > new Date()
    );
    remindersToDo.forEach(reminder => {
      this.addScheduledNotificationFromReminder(reminder);
    });
  }
}
